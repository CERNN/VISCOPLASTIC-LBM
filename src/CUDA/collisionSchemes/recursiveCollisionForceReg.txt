    // Calculate temporary variables
    const dfloat p1_muu15 = 1 - 1.5 * (uxVar * uxVar + 
        uyVar * uyVar + uzVar * uzVar);
    const dfloat rhoW0 = rhoVar * W0;
    const dfloat rhoW1 = rhoVar * W1;
    const dfloat rhoW2 = rhoVar * W2;
    const dfloat W1t9d2 = W1 * 4.5;
    const dfloat W2t9d2 = W2 * 4.5;
#ifdef D3Q27
    const dfloat rhoW3 = rhoVar * W3;
    const dfloat W3t9d2 = W3 * 4.5;
#endif
    const dfloat ux3 = 3 * uxVar;
    const dfloat uy3 = 3 * uyVar;
    const dfloat uz3 = 3 * uzVar;
    const dfloat ux3ux3d2 = ux3*ux3*0.5;
    const dfloat ux3uy3 = ux3*uy3;
    const dfloat ux3uz3 = ux3*uz3;
    const dfloat uy3uy3d2 = uy3*uy3*0.5;
    const dfloat uy3uz3 = uy3*uz3;
    const dfloat uz3uz3d2 = uz3*uz3*0.5;

    // Terms to use to recursive calculations
#ifdef D3Q19
    dfloat terms[6];
#endif 
#ifdef D3Q27
    dfloat terms[11];
#endif
    dfloat multiplyTerm = 1;
    dfloat auxTerm;


    // Calculate pineq(alfa, beta)
    // pineqAB = pops - popsEquilibrium
#ifdef D3Q19
    const dfloat pineqXX = (fNode[1] + fNode[2] + fNode[7] + fNode[8] + fNode[9] 
            + fNode[10] + fNode[13] + fNode[14] + fNode[15] + fNode[16]) -
            (2*rhoW1*(p1_muu15 + ux3ux3d2) + 
             4*rhoW2*(2*p1_muu15 + 2*ux3ux3d2 + uy3uy3d2 + uz3uz3d2));
    const dfloat pineqYY = (fNode[3] + fNode[4] + fNode[7] + fNode[8] + fNode[11]
            + fNode[12] + fNode[13] + fNode[14] + fNode[17] + fNode[18]) -
            (2*rhoW1*(p1_muu15 + uy3uy3d2) + 
             4*rhoW2*(2*p1_muu15 + ux3ux3d2 + 2*uy3uy3d2 + uz3uz3d2)); 
    const dfloat pineqZZ = (fNode[5] + fNode[6] + fNode[9] + fNode[10] + fNode[11]
            + fNode[12] + fNode[15] + fNode[16] + fNode[17] + fNode[18]) -
            (2*rhoW1*(p1_muu15 + uz3uz3d2) + 
             4*rhoW2*(2*p1_muu15 + ux3ux3d2 + uy3uy3d2 + 2*uz3uz3d2));
    const dfloat pineqXYt2 = ((fNode[7] + fNode[8] - fNode[13] - fNode[14]) - 
            (4*rhoW2*(ux3uy3))) * 2;
    const dfloat pineqXZt2 = ((fNode[9] + fNode[10] - fNode[15] - fNode[16]) -
            (4*rhoW2*(ux3uz3))) * 2;
    const dfloat pineqYZt2 = ((fNode[11] + fNode[12] - fNode[17] - fNode[18]) -
            (4*rhoW2*(uy3uz3))) * 2;
#endif // !D3Q19 
#ifdef D3Q27
    const dfloat aux = (fNode[19] + fNode[20] + fNode[21] + fNode[22] + fNode[23]
            + fNode[24] + fNode[25] + fNode[26]) - 
            (8*rhoW3*(ux3ux3d2 + uy3uy3d2 + uz3uz3d2));
    const dfloat pineqXX = (fNode[1] + fNode[2] + fNode[7] + fNode[8] + fNode[9] 
            + fNode[10] + fNode[13] + fNode[14] + fNode[15] + fNode[16] + aux) -
            (2*rhoW1*(p1_muu15 + ux3ux3d2) + 
             4*rhoW2*(2*p1_muu15 + 2*ux3ux3d2 + uy3uy3d2 + uz3uz3d2));
    const dfloat pineqYY = (fNode[3] + fNode[4] + fNode[7] + fNode[8] + fNode[11]
            + fNode[12] + fNode[13] + fNode[14] + fNode[17] + fNode[18] + aux) -
            (2*rhoW1*(p1_muu15 + uy3uy3d2) + 
             4*rhoW2*(ux3ux3d2 + 2*uy3uy3d2 + uz3uz3d2)); 
    const dfloat pineqZZ = (fNode[5] + fNode[6] + fNode[9] + fNode[10] + fNode[11]
            + fNode[12] + fNode[15] + fNode[16] + fNode[17] + fNode[18] + aux) -
            (2*rhoW1*(p1_muu15 + uz3uz3d2) + 
             4*rhoW2*(ux3ux3d2 + uy3uy3d2 + 2*uz3uz3d2));
    const dfloat pineqXYt2 = ((fNode[7] + fNode[8] - fNode[13] - fNode[14] + fNode[19]
            + fNode[20] + fNode[21] + fNode[22] - fNode[23] - fNode[24] - fNode[25]
            - fNode[26]) - 
            (4*rhoW2*(ux3uy3) + 8*rhoW3*(ux3uy3))) * 2;
    const dfloat pineqXZt2 = ((fNode[9] + fNode[10] - fNode[15] - fNode[16] + fNode[19]
            + fNode[20] - fNode[21] - fNode[22] + fNode[23] + fNode[24] - fNode[25]
            - fNode[26]) - 
            (4*rhoW2*(ux3uz3) + 8*rhoW3*(ux3uz3))) * 2;
    const dfloat pineqYZt2 = ((fNode[11] + fNode[12] - fNode[17] - fNode[18] + fNode[19]
            + fNode[20] - fNode[21] - fNode[22] - fNode[23] - fNode[24] + fNode[25]
            + fNode[26]) - 
            (4*rhoW2*(uy3uz3) + 8*rhoW3*(uy3uz3))) * 2;
#endif // !D3Q27

    // Calculate regularization terms 
    // terms[i] = Q[i, alfa, beta]*pi[i, alfa, beta] - c[i, alfa]*F[alfa]/3
    // terms[0] -> population 0
    // terms[1] -> population 1
    // terms[2] -> population 2
    // terms[3] -> population 3
    // terms[4] -> population 4
    terms[0] = -pineqXX/3 - pineqYY/3 - pineqZZ/3;
    terms[1] = terms[0] + (-FX_D3 + pineqXX);
    terms[2] = terms[0] + ( FX_D3 + pineqXX);
    terms[3] = terms[0] + (-FY_D3 + pineqYY);
    terms[4] = terms[0] + ( FY_D3 + pineqYY);
#ifdef D3Q27
    // terms[5] -> population 7
    // terms[6] -> population 8
    // terms[7] -> population 9
    // terms[8] -> population 10
    // terms[9] -> population 11
    // terms[10] -> population 12
    terms[5] = terms[1] + (-FY_D3 + pineqXYt2 + pineqYY);
    terms[6] = terms[2] + ( FY_D3 + pineqXYt2 + pineqYY);
    terms[7] = terms[1] + (-FZ_D3 + pineqXZt2 + pineqZZ);
    terms[8] = terms[2] + ( FZ_D3 + pineqXZt2 + pineqZZ);
    terms[9] = terms[3] + (-FZ_D3 + pineqYZt2 + pineqZZ);
    terms[10] = terms[4] + ( FZ_D3 + pineqYZt2 + pineqZZ);
#endif
    
    // Calculate regularized population to fNode
    // fNode[i] = 4.5*w[i](Q[i, alfa, beta]*pi[i, alfa, beta] 
    //          - c[i, alfa]*F[alfa]/3)
    multiplyTerm = W0*4.5;
    fNode[0] = multiplyTerm*terms[0];
    multiplyTerm = W1t9d2;
    fNode[1] = multiplyTerm*terms[1];
    fNode[2] = multiplyTerm*terms[2];
    fNode[3] = multiplyTerm*terms[3];
    fNode[4] = multiplyTerm*terms[4];
    fNode[5] = multiplyTerm*(terms[0] + (-FZ_D3 + pineqZZ));
    fNode[6] = multiplyTerm*(terms[0] + ( FZ_D3 + pineqZZ));
    multiplyTerm = W2t9d2;
    fNode[7] = multiplyTerm*(terms[1] + (-FY_D3 + pineqXYt2 + pineqYY));
    fNode[8] = multiplyTerm*(terms[2] + ( FY_D3 + pineqXYt2 + pineqYY));
    fNode[9] = multiplyTerm*(terms[1] + (-FZ_D3 + pineqXZt2 + pineqZZ));
    fNode[10] = multiplyTerm*(terms[2] + ( FZ_D3 + pineqXZt2 + pineqZZ));
    fNode[11] = multiplyTerm*(terms[3] + (-FZ_D3 + pineqYZt2 + pineqZZ));
    fNode[12] = multiplyTerm*(terms[4] + ( FZ_D3 + pineqYZt2 + pineqZZ));
    fNode[13] = multiplyTerm*(terms[1] + ( FY_D3 - pineqXYt2 + pineqYY));
    fNode[14] = multiplyTerm*(terms[2] + (-FY_D3 - pineqXYt2 + pineqYY));
    fNode[15] = multiplyTerm*(terms[1] + ( FZ_D3 - pineqXZt2 + pineqZZ));
    fNode[16] = multiplyTerm*(terms[2] + (-FZ_D3 - pineqXZt2 + pineqZZ));
    fNode[17] = multiplyTerm*(terms[3] + ( FZ_D3 - pineqYZt2 + pineqZZ));
    fNode[18] = multiplyTerm*(terms[4] + (-FZ_D3 - pineqYZt2 + pineqZZ));
#ifdef D3Q27
    multiplyTerm = W3t9d2;
    fNode[19] = multiplyTerm*(terms[5] + (-FZ_D3 + pineqXZt2 + pineqYZt2 + pineqZZ));
    fNode[20] = multiplyTerm*(terms[6] + ( FZ_D3 + pineqXZt2 + pineqYZt2 + pineqZZ));
    fNode[21] = multiplyTerm*(terms[5] + ( FZ_D3 - pineqXZt2 - pineqYZt2 + pineqZZ));
    fNode[22] = multiplyTerm*(terms[6] + (-FZ_D3 - pineqXZt2 - pineqYZt2 + pineqZZ));
    fNode[23] = multiplyTerm*(terms[7] + ( FY_D3 - pineqXYt2 + pineqYY - pineqYZt2));
    fNode[24] = multiplyTerm*(terms[8] + (-FY_D3 - pineqXYt2 + pineqYY - pineqYZt2));
    fNode[25] = multiplyTerm*(terms[9] + ( FX_D3 + pineqXX - pineqXYt2 - pineqXZt2));
    fNode[26] = multiplyTerm*(terms[10] + (-FX_D3 + pineqXX - pineqXYt2 - pineqXZt2));
#endif

    // Collision to fNode:
    // fNode = (1 - 1/TAU)*f1 + fEq + (1 - 0.5/TAU)*force ->
    // fNode = (1 - OMEGA)*f1 + fEq + (1 - 0.5*0MEGA)*force->
    // fNode = T_OMEGA * f1 + fEq + TT_OMEGA*force

    // Sequence is:
    // fNode *= T_OMEGA
    // fNode += fEq
    // fNode += TT_OMEGA*force

#pragma unroll
    for(char i = 0; i < Q; i++)
        fNode[i] *= T_OMEGA;

    // Calculate equilibrium terms 
    // terms = 0.5*uc3^2 + uc3
    // terms[0] -> population 0
    // terms[1] -> population 1
    // terms[2] -> population 2
    // terms[3] -> population 3
    // terms[4] -> population 4
    terms[0] = p1_muu15;
    terms[1] = terms[0] + ( ux3 + ux3ux3d2);
    terms[2] = terms[0] + (-ux3 + ux3ux3d2);
    terms[3] = terms[0] + ( uy3 + uy3uy3d2);
    terms[4] = terms[0] + (-uy3 + uy3uy3d2);
#ifdef D3Q27
    // terms[5] -> population 7
    // terms[6] -> population 8
    // terms[7] -> population 9
    // terms[8] -> population 10
    // terms[9] -> population 11
    // terms[10] -> population 12
    terms[5] = terms[1] + ( uy3 + ux3uy3 + uy3uy3d2);
    terms[6] = terms[2] + (-uy3 + ux3uy3 + uy3uy3d2);
    terms[7] = terms[1] + ( uz3 + ux3uz3 + uz3uz3d2);
    terms[8] = terms[2] + (-uz3 + ux3uz3 + uz3uz3d2);
    terms[9] = terms[3] + ( uz3 + uy3uz3 + uz3uz3d2);
    terms[10] = terms[4] + (-uz3 + uy3uz3 + uz3uz3d2);
#endif

    // fNode += fEq
    multiplyTerm = rhoW0;
    fNode[0] += multiplyTerm*terms[0];
    multiplyTerm = rhoW1;
    fNode[1] += multiplyTerm*terms[1];
    fNode[2] += multiplyTerm*terms[2];
    fNode[3] += multiplyTerm*terms[3];
    fNode[4] += multiplyTerm*terms[4];
    fNode[5] += multiplyTerm*(terms[0] + ( uz3 + uz3uz3d2));
    fNode[6] += multiplyTerm*(terms[0] + (-uz3 + uz3uz3d2));
    multiplyTerm = rhoW2;
    fNode[7]  += multiplyTerm*(terms[1] + ( uy3 + ux3uy3 + uy3uy3d2));
    fNode[8]  += multiplyTerm*(terms[2] + (-uy3 + ux3uy3 + uy3uy3d2));
    fNode[9]  += multiplyTerm*(terms[1] + ( uz3 + ux3uz3 + uz3uz3d2));
    fNode[10] += multiplyTerm*(terms[2] + (-uz3 + ux3uz3 + uz3uz3d2));
    fNode[11] += multiplyTerm*(terms[3] + ( uz3 + uy3uz3 + uz3uz3d2));
    fNode[12] += multiplyTerm*(terms[4] + (-uz3 + uy3uz3 + uz3uz3d2));
    fNode[13] += multiplyTerm*(terms[1] + (-uy3 - ux3uy3 + uy3uy3d2));
    fNode[14] += multiplyTerm*(terms[2] + ( uy3 - ux3uy3 + uy3uy3d2));
    fNode[15] += multiplyTerm*(terms[1] + (-uz3 - ux3uz3 + uz3uz3d2));
    fNode[16] += multiplyTerm*(terms[2] + ( uz3 - ux3uz3 + uz3uz3d2));
    fNode[17] += multiplyTerm*(terms[3] + (-uz3 - uy3uz3 + uz3uz3d2));
    fNode[18] += multiplyTerm*(terms[4] + ( uz3 - uy3uz3 + uz3uz3d2));
#ifdef D3Q27
    multiplyTerm = rhoW3;
    fNode[19] += multiplyTerm*(terms[5] + ( uz3 + ux3uz3 + uy3uz3 + uz3uz3d2));
    fNode[20] += multiplyTerm*(terms[6] + (-uz3 + ux3uz3 + uy3uz3 + uz3uz3d2));
    fNode[21] += multiplyTerm*(terms[5] + (-uz3 - ux3uz3 - uy3uz3 + uz3uz3d2));
    fNode[22] += multiplyTerm*(terms[6] + ( uz3 - ux3uz3 - uy3uz3 + uz3uz3d2));
    fNode[23] += multiplyTerm*(terms[7] + (-uy3 - ux3uy3 + uy3uy3d2 - uy3uz3));
    fNode[24] += multiplyTerm*(terms[8] + ( uy3 - ux3uy3 + uy3uy3d2 - uy3uz3));
    fNode[25] += multiplyTerm*(terms[9] + (-ux3 + ux3ux3d2 - ux3uy3 - ux3uz3));
    fNode[26] += multiplyTerm*(terms[10] + ( ux3 + ux3ux3d2 - ux3uy3 - ux3uz3));
#endif

    // calculate force term
    // term[0] -> population 0
    // term[1] -> population 1
    // term[2] -> population 3
    // term[3] -> population 7
    // term[4] -> population 9
    // term[5] -> population 11
    terms[0] = - FX*ux3 - FY*uy3 - FZ*uz3;
    terms[1] = terms[0] + (FX*( 3*ux3 + 3));
    terms[2] = terms[0] + (FY*( 3*uy3 + 3));
    terms[3] = terms[1] + (FX*( 3*uy3) + FY*( 3*ux3 + 3*uy3 + 3));
    terms[4] = terms[1] + (FX*( 3*uz3) + FZ*( 3*ux3 + 3*uz3 + 3));
    terms[5] = terms[2] + (FY*( 3*uz3) + FZ*( 3*uy3 + 3*uz3 + 3));
#ifdef D3Q27
    // term[6] -> population 19
    terms[6] = terms[3] + (FX*( 3*uz3) + FY*( 3*uz3) + FZ*( 3*ux3 + 3*uy3 + 3*uz3 + 3));
#endif

    // fNode += TT_OMEGA * force
    multiplyTerm = W0*TT_OMEGA;
    fNode[0] += multiplyTerm*terms[0];
    multiplyTerm = W1*TT_OMEGA;
    fNode[1] += multiplyTerm*terms[1];
    fNode[2] += multiplyTerm*(terms[1] + (FX*(-6)));
    fNode[3] += multiplyTerm*terms[2];
    fNode[4] += multiplyTerm*(terms[2] + (FY*(-6)));
    auxTerm = terms[0] + (FZ*( 3*uz3 + 3));
    fNode[5] += multiplyTerm*auxTerm;
    fNode[6] += multiplyTerm*(auxTerm + (FZ*(-6)));
    multiplyTerm = W2*TT_OMEGA;
    fNode[7] += multiplyTerm*terms[3];
    fNode[8] += multiplyTerm*(terms[3] + (FX*(-6) + FY*(-6)));
    fNode[9] += multiplyTerm*terms[4];
    fNode[10] += multiplyTerm*(terms[4] + (FX*(-6) + FZ*(-6)));
    fNode[11] += multiplyTerm*(terms[5]);
    fNode[12] += multiplyTerm*(terms[5] + (FY*(-6) + FZ*(-6)));
    auxTerm = terms[3] + (FX*(-6*uy3) + FY*(-6*ux3 - 6));
    fNode[13] += multiplyTerm*(auxTerm);
    fNode[14] += multiplyTerm*(auxTerm + (FX*(-6) + FY*( 6)));
    auxTerm = terms[4] + (FX*(-6*uz3) + FZ*(-6*ux3 - 6));
    fNode[15] += multiplyTerm*auxTerm;
    fNode[16] += multiplyTerm*(auxTerm + (FX*(-6) + FZ*( 6)));
    auxTerm = terms[5] + (FY*(-6*uz3) + FZ*(-6*uy3 - 6));
    fNode[17] += multiplyTerm*auxTerm;
    fNode[18] += multiplyTerm*(auxTerm + (FY*(-6) + FZ*( 6)));
#ifdef D3Q27
    multiplyTerm = W3*TT_OMEGA;
    fNode[19] += multiplyTerm*terms[6];
    fNode[20] += multiplyTerm*(terms[6] + (FX*(-6) + FY*(-6) + FZ*(-6)));
    auxTerm = terms[6] + (FX*(-6*uz3) + FY*(-6*uz3) + FZ*(-6*ux3 - 6*uy3 - 6));
    fNode[21] += multiplyTerm*auxTerm;
    fNode[22] += multiplyTerm*(auxTerm + (FX*(-6) + FY*(-6) + FZ*( 6)));
    auxTerm = terms[6] + (FX*(-6*uy3) + FY*(-6*ux3 - 6*uz3 - 6) + FZ*(-6*uy3));
    fNode[23] += multiplyTerm*auxTerm;
    fNode[24] += multiplyTerm*(auxTerm + (FX*(-6) + FY*( 6) + FZ*(-6)));
    auxTerm = terms[6] + (FX*(-6*uy3 - 6*uz3 - 6) + FY*(-6*ux3) + FZ*(-6*ux3));
    fNode[25] += multiplyTerm*auxTerm;
    fNode[26] += multiplyTerm*(auxTerm + (FX*( 6) + FY*(-6) + FZ*(-6)));
#endif
