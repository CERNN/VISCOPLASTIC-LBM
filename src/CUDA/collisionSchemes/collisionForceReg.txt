    // Equilibrium and non equilibrium populations
    dfloat feq[Q];
    dfloat fneq[Q];
    
    // Calculate temporary variables
    const dfloat p1_muu15 = 1 - 1.5 * (uxVar * uxVar + 
        uyVar * uyVar + uzVar * uzVar);
    const dfloat rhoW0 = rhoVar * W0;
    const dfloat rhoW1 = rhoVar * W1;
    const dfloat rhoW2 = rhoVar * W2;
    const dfloat W1t9d2 = W1 * 9 / 2;
    const dfloat W2t9d2 = W2 * 9 / 2;
#ifdef D3Q27
    const dfloat W3t9d2 = W3 * 9 / 2;
    const dfloat rhoW3 = rhoVar * W3;
#endif
    const dfloat ux3 = 3 * uxVar;
    const dfloat uy3 = 3 * uyVar;
    const dfloat uz3 = 3 * uzVar;

    // Calculate equilibrium populations
    // feq[i] = rho*w[i] * (1 - 1.5*u*u + 3*u*c[i] + 4.5*(u*c[i])^2) ->
    feq[ 0] = gpu_f_eq(rhoW0, 0, p1_muu15);
    feq[ 1] = gpu_f_eq(rhoW1,  ux3, p1_muu15);
    feq[ 2] = gpu_f_eq(rhoW1, -ux3, p1_muu15);
    feq[ 3] = gpu_f_eq(rhoW1,  uy3, p1_muu15);
    feq[ 4] = gpu_f_eq(rhoW1, -uy3, p1_muu15);
    feq[ 5] = gpu_f_eq(rhoW1,  uz3, p1_muu15);
    feq[ 6] = gpu_f_eq(rhoW1, -uz3, p1_muu15);
    feq[ 7] = gpu_f_eq(rhoW2,  ux3 + uy3, p1_muu15);
    feq[ 8] = gpu_f_eq(rhoW2, -ux3 - uy3, p1_muu15);
    feq[ 9] = gpu_f_eq(rhoW2,  ux3 + uz3, p1_muu15);
    feq[10] = gpu_f_eq(rhoW2, -ux3 - uz3, p1_muu15);
    feq[11] = gpu_f_eq(rhoW2,  uy3 + uz3, p1_muu15);
    feq[12] = gpu_f_eq(rhoW2, -uy3 - uz3, p1_muu15);
    feq[13] = gpu_f_eq(rhoW2,  ux3 - uy3, p1_muu15);
    feq[14] = gpu_f_eq(rhoW2, -ux3 + uy3, p1_muu15);
    feq[15] = gpu_f_eq(rhoW2,  ux3 - uz3, p1_muu15);
    feq[16] = gpu_f_eq(rhoW2, -ux3 + uz3, p1_muu15);
    feq[17] = gpu_f_eq(rhoW2,  uy3 - uz3, p1_muu15);
    feq[18] = gpu_f_eq(rhoW2, -uy3 + uz3, p1_muu15);
#ifdef D3Q27
    feq[19] = gpu_f_eq(rhoW3,  ux3 + uy3 + uz3, p1_muu15);
    feq[20] = gpu_f_eq(rhoW3, -ux3 - uy3 - uz3, p1_muu15);
    feq[21] = gpu_f_eq(rhoW3,  ux3 + uy3 - uz3, p1_muu15);
    feq[22] = gpu_f_eq(rhoW3, -ux3 - uy3 + uz3, p1_muu15);
    feq[23] = gpu_f_eq(rhoW3,  ux3 - uy3 + uz3, p1_muu15);
    feq[24] = gpu_f_eq(rhoW3, -ux3 + uy3 - uz3, p1_muu15);
    feq[25] = gpu_f_eq(rhoW3, -ux3 + uy3 + uz3, p1_muu15);
    feq[26] = gpu_f_eq(rhoW3,  ux3 - uy3 - uz3, p1_muu15);
#endif

    // Calculate non equilibrium populations
    // fneq = f - feq
#pragma unroll
    for(char i = 0; i < Q; i++)
        fneq[i] = fAux[i] - feq[i];

    // Calculate pineq(alfa, beta)/3
#ifdef D3Q19
    const dfloat pineqXXd3 = (fneq[1] + fneq[2] + fneq[7] + fneq[8] + fneq[9] 
            + fneq[10] + fneq[13] + fneq[14] + fneq[15] + fneq[16]) / 3;
    const dfloat pineqYYd3 = (fneq[3] + fneq[4] + fneq[7] + fneq[8] + fneq[11]
            + fneq[12] + fneq[13] + fneq[14] + fneq[17] + fneq[18]) / 3;
    const dfloat pineqZZd3 = (fneq[5] + fneq[6] + fneq[9] + fneq[10] + fneq[11]
            + fneq[12] + fneq[15] + fneq[16] + fneq[17] + fneq[18]) / 3;
    const dfloat pineqXYt2 = (fneq[7] + fneq[8] - fneq[13] - fneq[14]) * 2;
    const dfloat pineqXZt2 = (fneq[9] + fneq[10] - fneq[15] - fneq[16]) * 2;
    const dfloat pineqYZt2 = (fneq[11] + fneq[12] - fneq[17] - fneq[18]) * 2;
#elif D3Q27
    const dfloat aux = fneq[19] + fneq[20] + fneq[21] + fneq[22] + fneq[23]
            + fneq[24] + fneq[25] + fneq[26];
    const dfloat pineqXXd3 = (fneq[1] + fneq[2] + fneq[7] + fneq[8] + fneq[9] 
            + fneq[10] + fneq[13] + fneq[14] + fneq[15] + fneq[16] + aux) / 3;
    const dfloat pineqYYd3 = (fneq[3] + fneq[4] + fneq[7] + fneq[8] + fneq[11]
            + fneq[12] + fneq[13] + fneq[14] + fneq[17] + fneq[18] + aux) / 3;
    const dfloat pineqZZd3 = (fneq[5] + fneq[6] + fneq[9] + fneq[10] + fneq[11]
            + fneq[12] + fneq[15] + fneq[16] + fneq[17] + fneq[18] + aux) / 3;
    const dfloat pineqXYt2 = (fneq[7] + fneq[8] - fneq[13] - fneq[14] + fneq[19]
            + fneq[20] + fneq[21] + fneq[22] - fneq[23] - fneq[24] - fneq[25]
            - fneq[26]) * 2;
    const dfloat pineqXZt2 = (fneq[9] + fneq[10] - fneq[15] - fneq[16] + fneq[19]
            + fneq[20] - fneq[21] - fneq[22] + fneq[23] + fneq[24] - fneq[25]
            - fneq[26]) * 2;
    const dfloat pineqYZt2 = (fneq[11] + fneq[12] - fneq[17] - fneq[18] + fneq[19]
            + fneq[20] - fneq[21] - fneq[22] - fneq[23] - fneq[24] + fneq[25]
            + fneq[26]) * 2;
#endif
    
    // Calculate regularized population
    // fReg[i] = 4.5*w[i](Q[i, alfa, beta]*pi[i, alfa, beta] 
    //          - c[i, alfa]*F[alfa]/3)
    // Obs.: fAux is used as fReg
    fAux[ 0] = 4.5*W0*(-pineqXXd3 - pineqYYd3 - pineqZZd3);
    fAux[ 1] = W1t9d2*( FX_D3 + 2*pineqXXd3 - pineqYYd3 - pineqZZd3);
    fAux[ 2] = W1t9d2*(-FX_D3 + 2*pineqXXd3 - pineqYYd3 - pineqZZd3);
    fAux[ 3] = W1t9d2*( FY_D3 - pineqXXd3 + 2*pineqYYd3 - pineqZZd3);
    fAux[ 4] = W1t9d2*(-FY_D3 - pineqXXd3 + 2*pineqYYd3 - pineqZZd3);
    fAux[ 5] = W1t9d2*( FZ_D3 - pineqXXd3 - pineqYYd3 + 2*pineqZZd3);
    fAux[ 6] = W1t9d2*(-FZ_D3 - pineqXXd3 - pineqYYd3 + 2*pineqZZd3);
    fAux[ 7] = W2t9d2*( FX_D3 + FY_D3 + 2*pineqXXd3 + pineqXYt2 + 2*pineqYYd3 - pineqZZd3);
    fAux[ 8] = W2t9d2*(-FX_D3 - FY_D3 + 2*pineqXXd3 + pineqXYt2 + 2*pineqYYd3 - pineqZZd3);
    fAux[ 9] = W2t9d2*( FX_D3 + FZ_D3 + 2*pineqXXd3 + pineqXZt2 - pineqYYd3 + 2*pineqZZd3);
    fAux[10] = W2t9d2*(-FX_D3 - FZ_D3 + 2*pineqXXd3 + pineqXZt2 - pineqYYd3 + 2*pineqZZd3);
    fAux[11] = W2t9d2*( FY_D3 + FZ_D3 - pineqXXd3 + 2*pineqYYd3 + pineqYZt2 + 2*pineqZZd3);
    fAux[12] = W2t9d2*(-FY_D3 - FZ_D3 - pineqXXd3 + 2*pineqYYd3 + pineqYZt2 + 2*pineqZZd3);
    fAux[13] = W2t9d2*( FX_D3 - FY_D3 + 2*pineqXXd3 - pineqXYt2 + 2*pineqYYd3 - pineqZZd3);
    fAux[14] = W2t9d2*(-FX_D3 + FY_D3 + 2*pineqXXd3 - pineqXYt2 + 2*pineqYYd3 - pineqZZd3);
    fAux[15] = W2t9d2*( FX_D3 - FZ_D3 + 2*pineqXXd3 - pineqXZt2 - pineqYYd3 + 2*pineqZZd3);
    fAux[16] = W2t9d2*(-FX_D3 + FZ_D3 + 2*pineqXXd3 - pineqXZt2 - pineqYYd3 + 2*pineqZZd3);
    fAux[17] = W2t9d2*( FY_D3 - FZ_D3 - pineqXXd3 + 2*pineqYYd3 - pineqYZt2 + 2*pineqZZd3);
    fAux[18] = W2t9d2*(-FY_D3 + FZ_D3 - pineqXXd3 + 2*pineqYYd3 - pineqYZt2 + 2*pineqZZd3);
#ifdef D3Q27
    fAux[19] = W3t9d2*( FX_D3 + FY_D3 + FZ_D3 + 2*pineqXXd3 + pineqXYt2 + pineqXZt2 + 2*pineqYYd3 + pineqYZt2 + 2*pineqZZd3);
    fAux[20] = W3t9d2*(-FX_D3 - FY_D3 - FZ_D3 + 2*pineqXXd3 + pineqXYt2 + pineqXZt2 + 2*pineqYYd3 + pineqYZt2 + 2*pineqZZd3);
    fAux[21] = W3t9d2*( FX_D3 + FY_D3 - FZ_D3 + 2*pineqXXd3 + pineqXYt2 - pineqXZt2 + 2*pineqYYd3 - pineqYZt2 + 2*pineqZZd3);
    fAux[22] = W3t9d2*(-FX_D3 - FY_D3 + FZ_D3 + 2*pineqXXd3 + pineqXYt2 - pineqXZt2 + 2*pineqYYd3 - pineqYZt2 + 2*pineqZZd3);
    fAux[23] = W3t9d2*( FX_D3 - FY_D3 + FZ_D3 + 2*pineqXXd3 - pineqXYt2 + pineqXZt2 + 2*pineqYYd3 - pineqYZt2 + 2*pineqZZd3);
    fAux[24] = W3t9d2*(-FX_D3 + FY_D3 - FZ_D3 + 2*pineqXXd3 - pineqXYt2 + pineqXZt2 + 2*pineqYYd3 - pineqYZt2 + 2*pineqZZd3);
    fAux[25] = W3t9d2*(-FX_D3 + FY_D3 + FZ_D3 + 2*pineqXXd3 - pineqXYt2 - pineqXZt2 + 2*pineqYYd3 + pineqYZt2 + 2*pineqZZd3);
    fAux[26] = W3t9d2*( FX_D3 - FY_D3 - FZ_D3 + 2*pineqXXd3 - pineqXYt2 - pineqXZt2 + 2*pineqYYd3 + pineqYZt2 + 2*pineqZZd3);
#endif


    // Collision to fAux
    // fAux = (1 - 1/TAU)*fReg + f_eq + (1 - 0.5/TAU)*force ->
    // fAux = (1 - OMEGA)*fReg + f_eq + (1 - 0.5*0MEGA)*force->
    // fAux = T_OMEGA * f1 + f_eq + TT_OMEGA*force
    // Force term is:
    // Q[i, alfa, beta] = c[i, alfa]*c[i, beta] - d_kronecker[alfa, beta]/3
    // force[i] = w[i]*(3*c[i, alfa]+9*Q[i, alfa, beta]*u[beta])*F[alfa]
    
    fAux[ 0] = T_OMEGA * fAux[ 0] + feq[ 0] + 
               TT_OMEGA * gpu_force_term(W0,-ux3,-uy3,-uz3);
    
    fAux[ 1] = T_OMEGA * fAux[ 1] + feq[ 1] + 
               TT_OMEGA * gpu_force_term(W1, ux3*2+3,-uy3,-uz3);
    
    fAux[ 2] = T_OMEGA * fAux[ 2] + feq[ 2] + 
               TT_OMEGA * gpu_force_term(W1, ux3*2-3,-uy3,-uz3);
    
    fAux[ 3] = T_OMEGA * fAux[ 3] + feq[ 3] + 
               TT_OMEGA * gpu_force_term(W1,-ux3, uy3*2+3,-uz3);
    
    fAux[ 4] = T_OMEGA * fAux[ 4] + feq[ 4] + 
               TT_OMEGA * gpu_force_term(W1,-ux3, uy3*2-3,-uz3);
    
    fAux[ 5] = T_OMEGA * fAux[ 5] + feq[ 5] + 
               TT_OMEGA * gpu_force_term(W1,-ux3,-uy3, uz3*2+3);
    
    fAux[ 6] = T_OMEGA * fAux[ 6] + feq[ 6] + 
               TT_OMEGA * gpu_force_term(W1,-ux3,-uy3, uz3*2-3);
    
    fAux[ 7] = T_OMEGA * fAux[ 7] + feq[ 7] + 
               TT_OMEGA * gpu_force_term(W2, ux3*2+uy3*3+3, ux3*3+uy3*2+3,-uz3);
    
    fAux[ 8] = T_OMEGA * fAux[ 8] + feq[ 8] + 
               TT_OMEGA * gpu_force_term(W2, ux3*2+uy3*3-3, ux3*3+uy3*2-3,-uz3);
    
    fAux[ 9] = T_OMEGA * fAux[ 9] + feq[ 9] + 
               TT_OMEGA * gpu_force_term(W2, ux3*2+uz3*3+3,-uy3, ux3*3+uz3*2+3);
    
    fAux[10] = T_OMEGA * fAux[10] + feq[10] + 
               TT_OMEGA * gpu_force_term(W2, ux3*2+uz3*3-3,-uy3, ux3*3+uz3*2-3);
    
    fAux[11] = T_OMEGA * fAux[11] + feq[11] + 
               TT_OMEGA * gpu_force_term(W2,-ux3, uy3*2+uz3*3+3, uy3*3+uz3*2+3);
    
    fAux[12] = T_OMEGA * fAux[12] + feq[12] + 
               TT_OMEGA * gpu_force_term(W2,-ux3, uy3*2+uz3*3-3, uy3*3+uz3*2-3);
    
    fAux[13] = T_OMEGA * fAux[13] + feq[13] + 
               TT_OMEGA * gpu_force_term(W2, ux3*2-uy3*3+3,-ux3*3+uy3*2-3,-uz3);
    
    fAux[14] = T_OMEGA * fAux[14] + feq[14] + 
               TT_OMEGA * gpu_force_term(W2, ux3*2-uy3*3-3,-ux3*3+uy3*2+3,-uz3);
    
    fAux[15] = T_OMEGA * fAux[15] + feq[15] + 
               TT_OMEGA * gpu_force_term(W2, ux3*2-uz3*3+3,-uy3,-ux3*3+uz3*2-3);
    
    fAux[16] = T_OMEGA * fAux[16] + feq[16] + 
               TT_OMEGA * gpu_force_term(W2, ux3*2-uz3*3-3,-uy3,-ux3*3+uz3*2+3);
    
    fAux[17] = T_OMEGA * fAux[17] + feq[17] + 
               TT_OMEGA * gpu_force_term(W2,-ux3, uy3*2-uz3*3+3,-uy3*3+uz3*2-3);
    
    fAux[18] = T_OMEGA * fAux[18] + feq[18] + 
               TT_OMEGA * gpu_force_term(W2,-ux3, uy3*2-uz3*3-3,-uy3*3+uz3*2+3);
#ifdef D3Q27
    fAux[19] = T_OMEGA * fAux[19] + feq[19] + 
               TT_OMEGA * gpu_force_term(W3, ux3*2+uy3*3+uz3*3+3, ux3*3+uy3*2+uz3*3+3, ux3*3+uy3*3+uz3*2+3);
    
    fAux[20] = T_OMEGA * fAux[20] + feq[20] + 
               TT_OMEGA * gpu_force_term(W3, ux3*2+uy3*3+uz3*3-3, ux3*3+uy3*2+uz3*3-3, ux3*3+uy3*3+uz3*2-3); 
    
    fAux[21] = T_OMEGA * fAux[21] + feq[21] + 
               TT_OMEGA * gpu_force_term(W3, ux3*2+uy3*3-uz3*3+3, ux3*3+uy3*2-uz3*3+3,-ux3*3-uy3*3+uz3*2-3); 
    
    fAux[22] = T_OMEGA * fAux[22] + feq[22] + 
               TT_OMEGA * gpu_force_term(W3, ux3*2+uy3*3-uz3*3-3, ux3*3+uy3*2-uz3*3-3,-ux3*3-uy3*3+uz3*2+3);
    
    fAux[23] = T_OMEGA * fAux[23] + feq[23] + 
               TT_OMEGA * gpu_force_term(W3, ux3*2-uy3*3+uz3*3+3,-ux3*3+uy3*2-uz3*3-3, ux3*3-uy3*3+uz3*2+3);
    
    fAux[24] = T_OMEGA * fAux[24] + feq[24] + 
               TT_OMEGA * gpu_force_term(W3, ux3*2-uy3*3+uz3*3-3,-ux3*3+uy3*2-uz3*3+3, ux3*3-uy3*3+uz3*2-3);
    
    fAux[25] = T_OMEGA * fAux[25] + feq[25] + 
               TT_OMEGA * gpu_force_term(W3, ux3*2-uy3*3-uz3*3-3,-ux3*3+uy3*2+uz3*3+3,-ux3*3+uy3*3+uz3*2+3);
    
    fAux[26] = T_OMEGA * fAux[26] + feq[26] + 
               TT_OMEGA * gpu_force_term(W3, ux3*2-uy3*3-uz3*3+3,-ux3*3+uy3*2+uz3*3-3,-ux3*3+uy3*3+uz3*2-3);
#endif