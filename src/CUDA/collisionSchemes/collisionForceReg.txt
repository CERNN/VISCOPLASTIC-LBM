    // Calculate temporary variables
    const dfloat p1_muu15 = 1 - 1.5 * (uxVar * uxVar + 
        uyVar * uyVar + uzVar * uzVar);
    const dfloat rhoW0 = rhoVar * W0;
    const dfloat rhoW1 = rhoVar * W1;
    const dfloat rhoW2 = rhoVar * W2;
    const dfloat W1t9d2 = W1 * 9 / 2;
    const dfloat W2t9d2 = W2 * 9 / 2;
#ifdef D3Q27
    const dfloat rhoW3 = rhoVar * W3;
    const dfloat W3t9d2 = W3 * 9 / 2;
#endif
    const dfloat ux3 = 3 * uxVar;
    const dfloat uy3 = 3 * uyVar;
    const dfloat uz3 = 3 * uzVar;
    const dfloat ux3ux3d2 = ux3*ux3*0.5;
    const dfloat ux3uy3 = ux3*uy3;
    const dfloat ux3uz3 = ux3*uz3;
    const dfloat uy3uy3d2 = uy3*uy3*0.5;
    const dfloat uy3uz3 = uy3*uz3;
    const dfloat uz3uz3d2 = uz3*uz3*0.5;


    // Calculate pineq(alfa, beta)
    // pineqAB = pops - popsEquilibrium
#ifdef D3Q19
    const dfloat pineqXX = (fNode[1] + fNode[2] + fNode[7] + fNode[8] + fNode[9] 
            + fNode[10] + fNode[13] + fNode[14] + fNode[15] + fNode[16]) -
            (2*rhoW1*(p1_muu15 + ux3ux3d2) + 
             4*rhoW2*(2*p1_muu15 + 2*ux3ux3d2 + uy3uy3d2 + uz3uz3d2));
    const dfloat pineqYY = (fNode[3] + fNode[4] + fNode[7] + fNode[8] + fNode[11]
            + fNode[12] + fNode[13] + fNode[14] + fNode[17] + fNode[18]) -
            (2*rhoW1*(p1_muu15 + uy3uy3d2) + 
             4*rhoW2*(2*p1_muu15 + ux3ux3d2 + 2*uy3uy3d2 + uz3uz3d2)); 
    const dfloat pineqZZ = (fNode[5] + fNode[6] + fNode[9] + fNode[10] + fNode[11]
            + fNode[12] + fNode[15] + fNode[16] + fNode[17] + fNode[18]) -
            (2*rhoW1*(p1_muu15 + uz3uz3d2) + 
             4*rhoW2*(2*p1_muu15 + ux3ux3d2 + uy3uy3d2 + 2*uz3uz3d2));
    const dfloat pineqXYt2 = ((fNode[7] + fNode[8] - fNode[13] - fNode[14]) - 
            (4*rhoW2*(ux3uy3))) * 2;
    const dfloat pineqXZt2 = ((fNode[9] + fNode[10] - fNode[15] - fNode[16]) -
            (4*rhoW2*(ux3uz3))) * 2;
    const dfloat pineqYZt2 = ((fNode[11] + fNode[12] - fNode[17] - fNode[18]) -
            (4*rhoW2*(uy3uz3))) * 2;
#endif // !D3Q19 
#ifdef D3Q27
    const dfloat aux = (fNode[19] + fNode[20] + fNode[21] + fNode[22] + fNode[23]
            + fNode[24] + fNode[25] + fNode[26]) - 
            (8*rhoW3*(ux3ux3d2 + uy3uy3d2 + uz3uz3d2));
    const dfloat pineqXXd3 = ((fNode[1] + fNode[2] + fNode[7] + fNode[8] + fNode[9] 
            + fNode[10] + fNode[13] + fNode[14] + fNode[15] + fNode[16] + aux) -
            (2*rhoW1*(p1_muu15 + ux3ux3d2) + 
             4*rhoW2*(2*p1_muu15 + 2*ux3ux3d2 + uy3uy3d2 + uz3uz3d2)))/3;
    const dfloat pineqYYd3 = ((fNode[3] + fNode[4] + fNode[7] + fNode[8] + fNode[11]
            + fNode[12] + fNode[13] + fNode[14] + fNode[17] + fNode[18] + aux) -
            (2*rhoW1*(p1_muu15 + uy3uy3d2) + 
             4*rhoW2*(ux3ux3d2 + 2*uy3uy3d2 + uz3uz3d2)))/3; 
    const dfloat pineqZZd3 = ((fNode[5] + fNode[6] + fNode[9] + fNode[10] + fNode[11]
            + fNode[12] + fNode[15] + fNode[16] + fNode[17] + fNode[18] + aux) -
            (2*rhoW1*(p1_muu15 + uz3uz3d2) + 
             4*rhoW2*(ux3ux3d2 + uy3uy3d2 + 2*uz3uz3d2)))/3;
    const dfloat pineqXYt2 = ((fNode[7] + fNode[8] - fNode[13] - fNode[14] + fNode[19]
            + fNode[20] + fNode[21] + fNode[22] - fNode[23] - fNode[24] - fNode[25]
            - fNode[26]) - 
            (4*rhoW2*(ux3uy3) + 8*rhoW3*(ux3uy3))) * 2;
    const dfloat pineqXZt2 = ((fNode[9] + fNode[10] - fNode[15] - fNode[16] + fNode[19]
            + fNode[20] - fNode[21] - fNode[22] + fNode[23] + fNode[24] - fNode[25]
            - fNode[26]) - 
            (4*rhoW2*(ux3uz3) + 8*rhoW3*(ux3uz3))) * 2;
    const dfloat pineqYZt2 = ((fNode[11] + fNode[12] - fNode[17] - fNode[18] + fNode[19]
            + fNode[20] - fNode[21] - fNode[22] - fNode[23] - fNode[24] + fNode[25]
            + fNode[26]) - 
            (4*rhoW2*(uy3uz3) + 8*rhoW3*(uy3uz3))) * 2;
#endif // !D3Q27

    // Calculate regularized population
    // fReg[i] = 4.5*w[i](Q[i, alfa, beta]*pi[i, alfa, beta] 
    //          - c[i, alfa]*F[alfa]/3)
    // Obs.: fNode is used as fReg
    fNode[0] = 4.5*W0*(-pineqXXd3 - pineqYYd3 - pineqZZd3);
    fNode[1] = 4.5*W1*(-FX_D3 + 2*pineqXXd3 - pineqYYd3 - pineqZZd3);
    fNode[2] = 4.5*W1*( FX_D3 + 2*pineqXXd3 - pineqYYd3 - pineqZZd3);
    fNode[3] = 4.5*W1*(-FY_D3 - pineqXXd3 + 2*pineqYYd3 - pineqZZd3);
    fNode[4] = 4.5*W1*( FY_D3 - pineqXXd3 + 2*pineqYYd3 - pineqZZd3);
    fNode[5] = 4.5*W1*(-FZ_D3 - pineqXXd3 - pineqYYd3 + 2*pineqZZd3);
    fNode[6] = 4.5*W1*( FZ_D3 - pineqXXd3 - pineqYYd3 + 2*pineqZZd3);
    fNode[7] = 4.5*W2*(-FX_D3 - FY_D3 + 2*pineqXXd3 + pineqXYt2 + 2*pineqYYd3 - pineqZZd3);
    fNode[8] = 4.5*W2*( FX_D3 + FY_D3 + 2*pineqXXd3 + pineqXYt2 + 2*pineqYYd3 - pineqZZd3);
    fNode[9] = 4.5*W2*(-FX_D3 - FZ_D3 + 2*pineqXXd3 + pineqXZt2 - pineqYYd3 + 2*pineqZZd3);
    fNode[10] = 4.5*W2*( FX_D3 + FZ_D3 + 2*pineqXXd3 + pineqXZt2 - pineqYYd3 + 2*pineqZZd3);
    fNode[11] = 4.5*W2*(-FY_D3 - FZ_D3 - pineqXXd3 + 2*pineqYYd3 + pineqYZt2 + 2*pineqZZd3);
    fNode[12] = 4.5*W2*( FY_D3 + FZ_D3 - pineqXXd3 + 2*pineqYYd3 + pineqYZt2 + 2*pineqZZd3);
    fNode[13] = 4.5*W2*(-FX_D3 + FY_D3 + 2*pineqXXd3 - pineqXYt2 + 2*pineqYYd3 - pineqZZd3);
    fNode[14] = 4.5*W2*( FX_D3 - FY_D3 + 2*pineqXXd3 - pineqXYt2 + 2*pineqYYd3 - pineqZZd3);
    fNode[15] = 4.5*W2*(-FX_D3 + FZ_D3 + 2*pineqXXd3 - pineqXZt2 - pineqYYd3 + 2*pineqZZd3);
    fNode[16] = 4.5*W2*( FX_D3 - FZ_D3 + 2*pineqXXd3 - pineqXZt2 - pineqYYd3 + 2*pineqZZd3);
    fNode[17] = 4.5*W2*(-FY_D3 + FZ_D3 - pineqXXd3 + 2*pineqYYd3 - pineqYZt2 + 2*pineqZZd3);
    fNode[18] = 4.5*W2*( FY_D3 - FZ_D3 - pineqXXd3 + 2*pineqYYd3 - pineqYZt2 + 2*pineqZZd3);
#ifdef D3Q27
    fNode[19] = 4.5*W3*(-FX_D3 - FY_D3 - FZ_D3 + 2*pineqXXd3 + pineqXYt2 + pineqXZt2 + 2*pineqYYd3 + pineqYZt2 + 2*pineqZZd3);
    fNode[20] = 4.5*W3*( FX_D3 + FY_D3 + FZ_D3 + 2*pineqXXd3 + pineqXYt2 + pineqXZt2 + 2*pineqYYd3 + pineqYZt2 + 2*pineqZZd3);
    fNode[21] = 4.5*W3*(-FX_D3 - FY_D3 + FZ_D3 + 2*pineqXXd3 + pineqXYt2 - pineqXZt2 + 2*pineqYYd3 - pineqYZt2 + 2*pineqZZd3);
    fNode[22] = 4.5*W3*( FX_D3 + FY_D3 - FZ_D3 + 2*pineqXXd3 + pineqXYt2 - pineqXZt2 + 2*pineqYYd3 - pineqYZt2 + 2*pineqZZd3);
    fNode[23] = 4.5*W3*(-FX_D3 + FY_D3 - FZ_D3 + 2*pineqXXd3 - pineqXYt2 + pineqXZt2 + 2*pineqYYd3 - pineqYZt2 + 2*pineqZZd3);
    fNode[24] = 4.5*W3*( FX_D3 - FY_D3 + FZ_D3 + 2*pineqXXd3 - pineqXYt2 + pineqXZt2 + 2*pineqYYd3 - pineqYZt2 + 2*pineqZZd3);
    fNode[25] = 4.5*W3*( FX_D3 - FY_D3 - FZ_D3 + 2*pineqXXd3 - pineqXYt2 - pineqXZt2 + 2*pineqYYd3 + pineqYZt2 + 2*pineqZZd3);
    fNode[26] = 4.5*W3*(-FX_D3 + FY_D3 + FZ_D3 + 2*pineqXXd3 - pineqXYt2 - pineqXZt2 + 2*pineqYYd3 + pineqYZt2 + 2*pineqZZd3);
#endif
    // Collision to fNode
    // fNode = (1 - 1/TAU)*f1 + f_eq + (1 - 0.5/TAU)*force ->
    // fNode = (1 - OMEGA)*f1 + f_eq + (1 - 0.5*0MEGA)*force->
    // fNode = T_OMEGA * f1 + f_eq + TT_OMEGA*force
    // Force term is:
    // Q[i, alfa, beta] = c[i, alfa]*c[i, beta] - d_kronecker[alfa, beta]/3
    // force[i] = w[i]*(3*c[i, alfa]+9*Q[i, alfa, beta]*u[beta])*F[alfa]

    fNode[ 0] = T_OMEGA * fNode[ 0] + gpu_f_eq(rhoW0, 0, p1_muu15)
               + TT_OMEGA * gpu_force_term(W0,-ux3,-uy3,-uz3);

    fNode[ 1] = T_OMEGA * fNode[ 1] + gpu_f_eq(rhoW1,  ux3, p1_muu15) 
               + TT_OMEGA * gpu_force_term(W1, ux3*2+3,-uy3,-uz3);

    fNode[ 2] = T_OMEGA * fNode[ 2] + gpu_f_eq(rhoW1, -ux3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W1, ux3*2-3,-uy3,-uz3);

    fNode[ 3] = T_OMEGA * fNode[ 3] + gpu_f_eq(rhoW1,  uy3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W1,-ux3, uy3*2+3,-uz3);

    fNode[ 4] = T_OMEGA * fNode[ 4] + gpu_f_eq(rhoW1, -uy3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W1,-ux3, uy3*2-3,-uz3);

    fNode[ 5] = T_OMEGA * fNode[ 5] + gpu_f_eq(rhoW1,  uz3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W1,-ux3,-uy3, uz3*2+3);

    fNode[ 6] = T_OMEGA * fNode[ 6] + gpu_f_eq(rhoW1, -uz3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W1,-ux3,-uy3, uz3*2-3);

    fNode[ 7] = T_OMEGA * fNode[ 7] + gpu_f_eq(rhoW2,  ux3 + uy3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W2, ux3*2+uy3*3+3, ux3*3+uy3*2+3,-uz3);

    fNode[ 8] = T_OMEGA * fNode[ 8] + gpu_f_eq(rhoW2, -ux3 - uy3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W2, ux3*2+uy3*3-3, ux3*3+uy3*2-3,-uz3);

    fNode[ 9] = T_OMEGA * fNode[ 9] + gpu_f_eq(rhoW2,  ux3 + uz3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W2, ux3*2+uz3*3+3,-uy3, ux3*3+uz3*2+3);

    fNode[10] = T_OMEGA * fNode[10] + gpu_f_eq(rhoW2, -ux3 - uz3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W2, ux3*2+uz3*3-3,-uy3, ux3*3+uz3*2-3);

    fNode[11] = T_OMEGA * fNode[11] + gpu_f_eq(rhoW2,  uy3 + uz3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W2,-ux3, uy3*2+uz3*3+3, uy3*3+uz3*2+3);

    fNode[12] = T_OMEGA * fNode[12] + gpu_f_eq(rhoW2, -uy3 - uz3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W2,-ux3, uy3*2+uz3*3-3, uy3*3+uz3*2-3);

    fNode[13] = T_OMEGA * fNode[13] + gpu_f_eq(rhoW2,  ux3 - uy3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W2, ux3*2-uy3*3+3,-ux3*3+uy3*2-3,-uz3);

    fNode[14] = T_OMEGA * fNode[14] + gpu_f_eq(rhoW2, -ux3 + uy3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W2, ux3*2-uy3*3-3,-ux3*3+uy3*2+3,-uz3);

    fNode[15] = T_OMEGA * fNode[15] + gpu_f_eq(rhoW2,  ux3 - uz3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W2, ux3*2-uz3*3+3,-uy3,-ux3*3+uz3*2-3);

    fNode[16] = T_OMEGA * fNode[16] + gpu_f_eq(rhoW2, -ux3 + uz3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W2, ux3*2-uz3*3-3,-uy3,-ux3*3+uz3*2+3);

    fNode[17] = T_OMEGA * fNode[17] + gpu_f_eq(rhoW2,  uy3 - uz3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W2,-ux3, uy3*2-uz3*3+3,-uy3*3+uz3*2-3);

    fNode[18] = T_OMEGA * fNode[18] + gpu_f_eq(rhoW2, -uy3 + uz3, p1_muu15)
               + TT_OMEGA * gpu_force_term(W2,-ux3, uy3*2-uz3*3-3,-uy3*3+uz3*2+3);
#ifdef D3Q27
    fNode[19] = T_OMEGA * fNode[19] + feq[19] + 
               TT_OMEGA * gpu_force_term(W3, ux3*2+uy3*3+uz3*3+3, ux3*3+uy3*2+uz3*3+3, ux3*3+uy3*3+uz3*2+3);
    
    fNode[20] = T_OMEGA * fNode[20] + feq[20] + 
               TT_OMEGA * gpu_force_term(W3, ux3*2+uy3*3+uz3*3-3, ux3*3+uy3*2+uz3*3-3, ux3*3+uy3*3+uz3*2-3); 
    
    fNode[21] = T_OMEGA * fNode[21] + feq[21] + 
               TT_OMEGA * gpu_force_term(W3, ux3*2+uy3*3-uz3*3+3, ux3*3+uy3*2-uz3*3+3,-ux3*3-uy3*3+uz3*2-3); 
    
    fNode[22] = T_OMEGA * fNode[22] + feq[22] + 
               TT_OMEGA * gpu_force_term(W3, ux3*2+uy3*3-uz3*3-3, ux3*3+uy3*2-uz3*3-3,-ux3*3-uy3*3+uz3*2+3);
    
    fNode[23] = T_OMEGA * fNode[23] + feq[23] + 
               TT_OMEGA * gpu_force_term(W3, ux3*2-uy3*3+uz3*3+3,-ux3*3+uy3*2-uz3*3-3, ux3*3-uy3*3+uz3*2+3);
    
    fNode[24] = T_OMEGA * fNode[24] + feq[24] + 
               TT_OMEGA * gpu_force_term(W3, ux3*2-uy3*3+uz3*3-3,-ux3*3+uy3*2-uz3*3+3, ux3*3-uy3*3+uz3*2-3);
    
    fNode[25] = T_OMEGA * fNode[25] + feq[25] + 
               TT_OMEGA * gpu_force_term(W3, ux3*2-uy3*3-uz3*3-3,-ux3*3+uy3*2+uz3*3+3,-ux3*3+uy3*3+uz3*2+3);
    
    fNode[26] = T_OMEGA * fNode[26] + feq[26] + 
               TT_OMEGA * gpu_force_term(W3, ux3*2-uy3*3-uz3*3+3,-ux3*3+uy3*2+uz3*3-3,-ux3*3+uy3*3+uz3*2-3);
#endif
