    // Calculate temporary variables
    const dfloat p1_muu15 = 1 - 1.5 * (uxVar * uxVar + 
        uyVar * uyVar + uzVar * uzVar);
    const dfloat rhoW0 = rhoVar * W0;
    const dfloat rhoW1 = rhoVar * W1;
    const dfloat rhoW2 = rhoVar * W2;
#ifdef D3Q27
    const dfloat rhoW3 = rhoVar * W3;
#endif
    const dfloat ux3 = 3 * uxVar;
    const dfloat uy3 = 3 * uyVar;
    const dfloat uz3 = 3 * uzVar;

    // Collision to fAux
    // fAux = (1-1/TAU)*f + (1/TAU)*f_eq + (1-0.5/TAU)*force ->
    // fAux = (1-OMEGA)*f + OMEGA*f_eq + (1-0.5*0MEGA)*force->
    // fAux = T_OMEGA*f + OMEGA*f_eq + TT_OMEGA*force
    // Force term is:
    // Q[i, alfa, beta] = c[i, alfa]*c[i, beta] - d_kronecker[alfa, beta]/3
    // force[i] = w[i]*(3*c[i, alfa]+9*Q[i, alfa, beta]*u[beta])*F[alfa]
    fAux[ 0] = T_OMEGA * fAux[ 0] + OMEGA * gpu_f_eq(rhoVar * W0, 0, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W0,-ux3,-uy3,-uz3);
    fAux[ 1] = T_OMEGA * fAux[ 1] + OMEGA * gpu_f_eq(rhoW1,  ux3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W1, ux3*2+3,-uy3,-uz3);
    fAux[ 2] = T_OMEGA * fAux[ 2] + OMEGA * gpu_f_eq(rhoW1, -ux3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W1, ux3*2-3,-uy3,-uz3);
    fAux[ 3] = T_OMEGA * fAux[ 3] + OMEGA * gpu_f_eq(rhoW1,  uy3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W1,-ux3, uy3*2+3,-uz3);
    fAux[ 4] = T_OMEGA * fAux[ 4] + OMEGA * gpu_f_eq(rhoW1, -uy3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W1,-ux3, uy3*2-3,-uz3);
    fAux[ 5] = T_OMEGA * fAux[ 5] + OMEGA * gpu_f_eq(rhoW1,  uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W1,-ux3,-uy3, uz3*2+3);
    fAux[ 6] = T_OMEGA * fAux[ 6] + OMEGA * gpu_f_eq(rhoW1, -uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W1,-ux3,-uy3, uz3*2-3);
    fAux[ 7] = T_OMEGA * fAux[ 7] + OMEGA * gpu_f_eq(rhoW2,  ux3 + uy3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W2, ux3*2+uy3*3+3, ux3*3+uy3*2+3,-uz3);
    fAux[ 8] = T_OMEGA * fAux[ 8] + OMEGA * gpu_f_eq(rhoW2, -ux3 - uy3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W2, ux3*2+uy3*3-3, ux3*3+uy3*2-3,-uz3);
    fAux[ 9] = T_OMEGA * fAux[ 9] + OMEGA * gpu_f_eq(rhoW2,  ux3 + uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W2, ux3*2+uz3*3+3,-uy3, ux3*3+uz3*2+3);
    fAux[10] = T_OMEGA * fAux[10] + OMEGA * gpu_f_eq(rhoW2, -ux3 - uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W2, ux3*2+uz3*3-3,-uy3, ux3*3+uz3*2-3);
    fAux[11] = T_OMEGA * fAux[11] + OMEGA * gpu_f_eq(rhoW2,  uy3 + uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W2,-ux3, uy3*2+uz3*3+3, uy3*3+uz3*2+3);
    fAux[12] = T_OMEGA * fAux[12] + OMEGA * gpu_f_eq(rhoW2, -uy3 - uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W2,-ux3, uy3*2+uz3*3-3, uy3*3+uz3*2-3);
    fAux[13] = T_OMEGA * fAux[13] + OMEGA * gpu_f_eq(rhoW2,  ux3 - uy3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W2, ux3*2-uy3*3+3,-ux3*3+uy3*2-3,-uz3);
    fAux[14] = T_OMEGA * fAux[14] + OMEGA * gpu_f_eq(rhoW2, -ux3 + uy3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W2, ux3*2-uy3*3-3,-ux3*3+uy3*2+3,-uz3);
    fAux[15] = T_OMEGA * fAux[15] + OMEGA * gpu_f_eq(rhoW2,  ux3 - uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W2, ux3*2-uz3*3+3,-uy3,-ux3*3+uz3*2-3);
    fAux[16] = T_OMEGA * fAux[16] + OMEGA * gpu_f_eq(rhoW2, -ux3 + uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W2, ux3*2-uz3*3-3,-uy3,-ux3*3+uz3*2+3);
    fAux[17] = T_OMEGA * fAux[17] + OMEGA * gpu_f_eq(rhoW2,  uy3 - uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W2,-ux3, uy3*2-uz3*3+3,-uy3*3+uz3*2-3);
    fAux[18] = T_OMEGA * fAux[18] + OMEGA * gpu_f_eq(rhoW2, -uy3 + uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W2,-ux3, uy3*2-uz3*3-3,-uy3*3+uz3*2+3);
#ifdef D3Q27
    fAux[19] = T_OMEGA * fAux[19] + OMEGA * gpu_f_eq(rhoW3,  ux3 + uy3 + uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W3, ux3*2+uy3*3+uz3*3+3, ux3*3+uy3*2+uz3*3+3, ux3*3+uy3*3+uz3*2+3);
    fAux[20] = T_OMEGA * fAux[20] + OMEGA * gpu_f_eq(rhoW3, -ux3 - uy3 - uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W3, ux3*2+uy3*3+uz3*3-3, ux3*3+uy3*2+uz3*3-3, ux3*3+uy3*3+uz3*2-3); 
    fAux[21] = T_OMEGA * fAux[21] + OMEGA * gpu_f_eq(rhoW3,  ux3 + uy3 - uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W3, ux3*2+uy3*3-uz3*3+3, ux3*3+uy3*2-uz3*3+3,-ux3*3-uy3*3+uz3*2-3); 
    fAux[22] = T_OMEGA * fAux[22] + OMEGA * gpu_f_eq(rhoW3, -ux3 - uy3 + uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W3, ux3*2+uy3*3-uz3*3-3, ux3*3+uy3*2-uz3*3-3,-ux3*3-uy3*3+uz3*2+3);
    fAux[23] = T_OMEGA * fAux[23] + OMEGA * gpu_f_eq(rhoW3,  ux3 - uy3 + uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W3, ux3*2-uy3*3+uz3*3+3,-ux3*3+uy3*2-uz3*3-3, ux3*3-uy3*3+uz3*2+3);
    fAux[24] = T_OMEGA * fAux[24] + OMEGA * gpu_f_eq(rhoW3, -ux3 + uy3 - uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W3, ux3*2-uy3*3+uz3*3-3,-ux3*3+uy3*2-uz3*3+3, ux3*3-uy3*3+uz3*2-3);
    fAux[25] = T_OMEGA * fAux[25] + OMEGA * gpu_f_eq(rhoW3, -ux3 + uy3 + uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W3, ux3*2-uy3*3-uz3*3-3,-ux3*3+uy3*2+uz3*3+3,-ux3*3+uy3*3+uz3*2+3);
    fAux[26] = T_OMEGA * fAux[26] + OMEGA * gpu_f_eq(rhoW3,  ux3 - uy3 - uz3, p1_muu15) + 
               TT_OMEGA * gpu_force_term(W3, ux3*2-uy3*3-uz3*3+3,-ux3*3+uy3*2+uz3*3-3,-ux3*3+uy3*3+uz3*2-3);
#endif